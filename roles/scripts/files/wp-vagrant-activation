#!/usr/bin/env ruby
##
# Runs commands needed during vagrant up
##
require 'yaml'

##
# We need sudo for this
##
unless Process.uid == 0
  puts 'ERROR: Must run as root'
  exit 1
end

# Generate https-domain-alias from config
config_file = File.join('/data/wordpress','config.yml')

if File.exists?(config_file)
  config = YAML.load_file(config_file)
else
  raise 'ERROR: config.yml was not found. Please provide the needed information for your box in config.yml.'
end

# ADD HTTPS_DOMAIN_ALIAS to envs
unless File.readlines("/etc/container_environment.sh").grep(/^export HTTPS_DOMAIN_ALIAS/).any?
  File.open('/etc/container_environment.sh', "a+") do |file|
    file.write "\nexport HTTPS_DOMAIN_ALIAS=#{config['name']}.wp-palvelu.local\n"
  end
end

# Add it to envs of php5-fpm
unless File.readlines("/etc/nginx/fastcgi_params").grep(/^fastcgi_param  HTTPS_DOMAIN_ALIAS/).any?
  File.open('/etc/nginx/fastcgi_params', "a+") do |file|
    file.write "\nfastcgi_param  HTTPS_DOMAIN_ALIAS   #{config['name']}.wp-palvelu.local;\n"
  end
end

# Restart nginx
system "service nginx restart"

# Reload avahi-daemon so it broadcast hostname of this vagrant box
system "service avahi-daemon restart"


##
# Fill /etc/hosts/ with domain entries
##

def get_domains(config)
  domains = config['development']['domains'] || []
  domains << config['development']['domain'] unless config['development']['domain'].nil?

  # For backwards compatibility:
  # Eerlier we used the domain .dev and it's still ok
  domains << config['name']+".dev"
  domains << "www."+config['name']+".dev"
  domains << config['name']+".seravo.dev" #test https-domain-alias locally
  domains << "webgrind."+config['name']+".dev" #For xdebug
  domains << "adminer."+config['name']+".dev" #For DB-administration
  domains << "mailcatcher."+config['name']+".dev" #For Mail debugging
  domains << "browsersync."+config['name']+".dev" #For browser-sync admin
  domains << "info."+config['name']+".dev" #For Info page
  domains << "terminal."+config['name']+".dev" #Running ad-hoc commands

  # Main domain should be {{site}}.local so that devices in same network can use them as well through zeroconf
  domains << config['name']+".local"
  domains << "www."+config['name']+".local"
  domains << config['name']+".seravo.local" #test https-domain-alias locally
  domains << config['name']+".wp-palvelu.local" #test https-domain-alias locally
  domains << "webgrind."+config['name']+".local" #For xdebug
  domains << "adminer."+config['name']+".local" #For DB-administration
  domains << "mailcatcher."+config['name']+".local" #For Mail debugging
  domains << "browsersync."+config['name']+".local" #For browser-sync admin
  domains << "info."+config['name']+".local" #For Info page
  domains << "terminal."+config['name']+".local" #Running ad-hoc commands

  domains.uniq #remove duplicates
end

# Add all domains to /etc/hosts/
domains = get_domains(config)

puts "Setting custom domains in /etc/hosts/..."

domains.each do |domain|
  unless File.readlines("/etc/hosts").grep(/#{domain}/).any?
    File.open('/etc/hosts', "a+") do |file|
      file.write "127.0.0.1 #{domain}\n"
    end
  end
end

##
# Generate .ssh/config if config.yml contains values for that
## 
unless config['production'].nil? or config['production']['ssh_port'].nil? or config['production']['domain'].nil?
  ssh_user = config['production']['user'] || config['name']

  # ssh config file
  ssh_config = '/home/vagrant/.ssh/config'

  unless File.exists? ssh_config
    puts "Generating ssh configs..."
    # Create file
    File.open(ssh_config, "w") {}

    # Add production configs to to ssh config inside vagrant
    File.open(ssh_config, 'a') do |file|
      file.puts "##"
      file.puts "# Automatically generated ssh config from /data/wordpress/config.yml"
      file.puts "##"
      file.puts "Host production #{config['name']} #{config['production']['domain']}"
      file.puts "  Hostname #{config['production']['domain']}"
      file.puts "  Port #{config['production']['ssh_port']}"
      file.puts "  User #{ssh_user}"
    end
  end
end


##
# Auto-update WP-CLI to the newest version
##
puts "Updating WP-CLI to the newest version..."
system "wp cli update"
