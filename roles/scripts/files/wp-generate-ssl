#!/usr/bin/env ruby
##
# Generate SSL-certificate with all domains from config.yml
##
require 'yaml'

config_file = File.join('/data/wordpress','config.yml')

if File.exists?(config_file)
  config = YAML.load_file(config_file)
else
  raise 'ERROR: config.yml was not found. Please provide the needed information for your box in config.yml.'
end

def generate_self_signed_ssl(config)
  ssl_path = "/data/wordpress/.vagrant/ssl"
  nginx_path = "/data/wordpress/.vagrant/nginx"

  #Stop now if this is generated already
  if File.exists?(File.join(ssl_path,"development.crt"))
    puts "==> ssl-keys already exist in: #{ssl_path}"
    return
  end
  puts "==> generating new self signed certificate..."

  #Create directory for ssl and nginx
  system "mkdir -p #{ssl_path}"
  system "mkdir -p #{nginx_path}"

  #bit hacky but nice way to embed file here
  open_ssl_file_content = <<EOF
[req]
distinguished_name = req_distinguished_name
x509_extensions = v3_req
prompt = no

[req_distinguished_name]
C = FI
ST = Pirkanmaa
L = Tampere
O = Seravo Oy
CN = #{config['name']}.local
emailAddress = wordpress@seravo.fi
[v3_req]
subjectKeyIdentifier = hash
authorityKeyIdentifier = keyid,issuer
basicConstraints = CA:TRUE
subjectAltName = @alt_names

[alt_names]
EOF

  #Append domains into string
  domains = get_domains(config)
  domains.each_with_index {|domain, index|
    open_ssl_file_content += "DNS.#{index+1} = #{domain}\n"
  }
  #Write to file
  File.open(File.join(ssl_path,"openssl.cnf"), 'w') { |file| file.write(open_ssl_file_content) }


  #Write additional nginx config
  nginx_additions = <<EOF
# Generated when site was provisioned
ssl_certificate #{ssl_path}/development.crt;
ssl_certificate_key #{ssl_path}/development.key;
EOF
  File.open(File.join(nginx_path,"development-ssl.conf"), 'w') { |file| file.write(nginx_additions) }

  system "openssl req -x509 -nodes -days 3650 -newkey rsa:2048 -keyout #{ssl_path}/development.key -out #{ssl_path}/development.crt -config #{ssl_path}/openssl.cnf > /dev/null 2>&1"
  system "sudo service nginx restart && sudo rm /data/log/nginx-error.log"
end

def get_domains(config)
  domains = config['development']['domains'] || []
  domains << config['development']['domain'] unless config['development']['domain'].nil?

  # For backwards compatibility:
  # Eerlier we used the domain .dev and it's still ok
  domains << config['name']+".dev"
  domains << "www."+config['name']+".dev"

  # Test https-domain-alias locally
  domains << config['name']+".wp-palvelu.dev"
  domains << config['name']+".seravo.dev"

  # Use xdebug
  domains << "webgrind."+config['name']+".dev"
  domains << "adminer."+config['name']+".dev" #For DB-administration
  domains << "mailcatcher."+config['name']+".dev" #For Mail debugging
  domains << "browsersync."+config['name']+".dev" #For browser-sync admin
  domains << "info."+config['name']+".dev" #For Info page
  domains << "terminal."+config['name']+".dev" #Running ad-hoc commands

  # Main domain should be {{site}}.local so that devices in same network can use them as well through zeroconf
  domains << config['name']+".local"
  domains << "www."+config['name']+".local"

  # Test https-domain-alias locally
  domains << config['name']+".wp-palvelu.local"
  domains << config['name']+".seravo.local"

  # Use xdebug
  domains << "webgrind."+config['name']+".local"
  domains << "adminer."+config['name']+".local" #For DB-administration
  domains << "mailcatcher."+config['name']+".local" #For Mail debugging
  domains << "browsersync."+config['name']+".local" #For browser-sync admin
  domains << "info."+config['name']+".local" #For Info page
  domains << "terminal."+config['name']+".local" #Running ad-hoc commands

  domains.uniq #remove duplicates
end

generate_self_signed_ssl(config)
